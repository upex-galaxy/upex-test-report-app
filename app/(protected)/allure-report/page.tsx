"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Button } from "@/components/ui/button"
import { AlertCircle, RefreshCw, ChevronRight } from "lucide-react"

// Tipos para la estructura de navegación
type Environment = "stage" | "review" | "production"
type Strategy = "sanity" | "smoke" | "regression"

interface EnvironmentData {
  name: Environment
  strategies: {
    name: Strategy
    buildNumbers: string[]
  }[]
}

export default function AllureReportPage() {
  const [isLoading, setIsLoading] = useState(true)
  const [environments, setEnvironments] = useState<EnvironmentData[]>([])
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    checkAllureReports()
  }, [])

  const checkAllureReports = async () => {
    setIsLoading(true)
    setError(null)

    try {
      // En un entorno real, esto haría una solicitud a una API o leería del sistema de archivos
      // Por ahora, simulamos datos de ejemplo
      setTimeout(() => {
        setEnvironments([
          {
            name: "stage",
            strategies: [
              { name: "sanity", buildNumbers: ["34", "33", "32"] },
              { name: "smoke", buildNumbers: ["28", "27", "26"] },
              { name: "regression", buildNumbers: ["42", "41", "40"] },
            ],
          },
          {
            name: "review",
            strategies: [
              { name: "sanity", buildNumbers: ["21", "20"] },
              { name: "smoke", buildNumbers: ["18", "17"] },
              { name: "regression", buildNumbers: ["15", "14"] },
            ],
          },
          {
            name: "production",
            strategies: [
              { name: "sanity", buildNumbers: ["12", "11"] },
              { name: "smoke", buildNumbers: ["10", "9"] },
              { name: "regression", buildNumbers: ["8", "7"] },
            ],
          },
        ])
        setIsLoading(false)
      }, 1000)
    } catch (err) {
      setError("Failed to check for Allure reports")
      setIsLoading(false)
    }
  }

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold neon-gradient">Allure Reports</h1>
        <p className="text-gray-400 mt-2">View detailed test reports generated by Allure across all environments</p>
      </div>

      {isLoading ? (
        <div className="flex justify-center py-8">
          <RefreshCw className="h-8 w-8 animate-spin text-[#62E4CF]" />
        </div>
      ) : error ? (
        <Alert variant="destructive" className="bg-red-900/20 border-red-800">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      ) : (
        <div className="grid grid-cols-1 gap-6">
          {environments.map((env) => (
            <Card key={env.name} className="neon-card">
              <CardHeader>
                <CardTitle className="capitalize">{env.name} Environment</CardTitle>
                <CardDescription>Allure reports for {env.name} environment</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {env.strategies.map((strategy) => (
                    <Card key={strategy.name} className="bg-[#1A1A2E] border-[#62E4CF]/20">
                      <CardHeader className="py-3">
                        <CardTitle className="text-lg capitalize">{strategy.name} Tests</CardTitle>
                      </CardHeader>
                      <CardContent className="py-3">
                        <ul className="space-y-2">
                          {strategy.buildNumbers.slice(0, 3).map((buildNumber) => (
                            <li key={buildNumber} className="flex items-center justify-between">
                              <Link
                                href={`/allure-report/${env.name}/${strategy.name}/${buildNumber}/index.html`}
                                target="_blank"
                                className="text-[#62E4CF] hover:underline text-sm"
                              >
                                Execution #{buildNumber}
                              </Link>
                            </li>
                          ))}
                        </ul>

                        <div className="mt-3 flex justify-end">
                          <Button
                            variant="ghost"
                            size="sm"
                            className="text-xs text-[#62E4CF] hover:text-[#62E4CF] hover:bg-[#62E4CF]/10"
                            asChild
                          >
                            <Link href={`/${env.name}/${strategy.name}`}>
                              <span>View All</span>
                              <ChevronRight size={14} className="ml-1" />
                            </Link>
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      <Card className="neon-card">
        <CardHeader>
          <CardTitle>How to Upload an Allure Report</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="p-4 bg-[#1A1A2E] rounded-md">
            <ol className="list-decimal list-inside space-y-2 text-gray-300">
              <li>Generate an Allure report from your test framework</li>
              <li>
                Create the directory structure:{" "}
                <code className="bg-[#0B0C10] px-1 py-0.5 rounded">
                  public/allure-report/{"{environment}"}/{"{strategy}"}/{"{build-number}"}
                </code>
              </li>
              <li>Copy the generated files to the appropriate directory</li>
              <li>
                Ensure the directory contains an <code className="bg-[#0B0C10] px-1 py-0.5 rounded">index.html</code>{" "}
                file
              </li>
              <li>Redeploy your application or refresh this page</li>
            </ol>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

