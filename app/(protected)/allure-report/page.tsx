"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Button } from "@/components/ui/button"
import { AlertCircle, RefreshCw } from "lucide-react"

export default function AllureReportPage() {
  const [isLoading, setIsLoading] = useState(true)
  const [hasReport, setHasReport] = useState(false)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    checkAllureReport()
  }, [])

  const checkAllureReport = async () => {
    setIsLoading(true)
    setError(null)

    try {
      // Check if the allure report index.html exists
      const response = await fetch("/allure-report/index.html", { method: "HEAD" })
      setHasReport(response.ok)
    } catch (err) {
      setError("Failed to check for Allure report")
      setHasReport(false)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold neon-gradient">Allure Reports</h1>
        <p className="text-gray-400 mt-2">View detailed test reports generated by Allure</p>
      </div>

      <Card className="neon-card">
        <CardHeader>
          <CardTitle>Allure Report Viewer</CardTitle>
          <CardDescription>Access the latest Allure test report</CardDescription>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="flex justify-center py-8">
              <RefreshCw className="h-8 w-8 animate-spin text-[#62E4CF]" />
            </div>
          ) : hasReport ? (
            <div className="space-y-4">
              <p>The Allure report is available and ready to view. Click the button below to open it.</p>
              <div className="flex justify-center">
                <Button onClick={() => window.open("/allure-report/index.html", "_blank")} className="neon-button">
                  View Allure Report
                </Button>
              </div>
            </div>
          ) : (
            <Alert variant="destructive" className="bg-red-900/20 border-red-800">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Report Not Found</AlertTitle>
              <AlertDescription>
                No Allure report was found in the public directory. Please upload a report to the public/allure-report
                folder.
              </AlertDescription>
            </Alert>
          )}

          {error && (
            <Alert variant="destructive" className="mt-4 bg-red-900/20 border-red-800">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <div className="mt-8 p-4 bg-[#1A1A2E] rounded-md">
            <h3 className="text-lg font-medium mb-2">How to Upload an Allure Report</h3>
            <ol className="list-decimal list-inside space-y-2 text-gray-300">
              <li>Generate an Allure report from your test framework</li>
              <li>
                Copy the generated files to the{" "}
                <code className="bg-[#0B0C10] px-1 py-0.5 rounded">public/allure-report</code> directory
              </li>
              <li>
                Ensure the directory contains an <code className="bg-[#0B0C10] px-1 py-0.5 rounded">index.html</code>{" "}
                file
              </li>
              <li>Redeploy your application or refresh this page</li>
            </ol>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

